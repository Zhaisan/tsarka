// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tsarka.sql

package db

import (
	"context"
)

const createString = `-- name: CreateString :one
INSERT INTO tsarka (
    string,
    max_substring
) VALUES (
          $1, $2
         ) RETURNING id, string, max_substring
`

type CreateStringParams struct {
	String       string `json:"string"`
	MaxSubstring string `json:"max_substring"`
}

func (q *Queries) CreateString(ctx context.Context, arg CreateStringParams) (Tsarka, error) {
	row := q.db.QueryRowContext(ctx, createString, arg.String, arg.MaxSubstring)
	var i Tsarka
	err := row.Scan(&i.ID, &i.String, &i.MaxSubstring)
	return i, err
}

const deleteString = `-- name: DeleteString :one
DELETE FROM tsarka WHERE id = $1
    RETURNING id, string, max_substring
`

func (q *Queries) DeleteString(ctx context.Context, id int32) (Tsarka, error) {
	row := q.db.QueryRowContext(ctx, deleteString, id)
	var i Tsarka
	err := row.Scan(&i.ID, &i.String, &i.MaxSubstring)
	return i, err
}

const getString = `-- name: GetString :one
SELECT max_substring FROM tsarka
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetString(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getString, id)
	var max_substring string
	err := row.Scan(&max_substring)
	return max_substring, err
}

const listStrings = `-- name: ListStrings :many
SELECT id, string, max_substring FROM tsarka
ORDER BY id LIMIT $1
OFFSET $2
`

type ListStringsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStrings(ctx context.Context, arg ListStringsParams) ([]Tsarka, error) {
	rows, err := q.db.QueryContext(ctx, listStrings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tsarka
	for rows.Next() {
		var i Tsarka
		if err := rows.Scan(&i.ID, &i.String, &i.MaxSubstring); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateString = `-- name: UpdateString :one
UPDATE tsarka SET max_substring = $1
WHERE id = $2
RETURNING id, string, max_substring
`

type UpdateStringParams struct {
	MaxSubstring string `json:"max_substring"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdateString(ctx context.Context, arg UpdateStringParams) (Tsarka, error) {
	row := q.db.QueryRowContext(ctx, updateString, arg.MaxSubstring, arg.ID)
	var i Tsarka
	err := row.Scan(&i.ID, &i.String, &i.MaxSubstring)
	return i, err
}
